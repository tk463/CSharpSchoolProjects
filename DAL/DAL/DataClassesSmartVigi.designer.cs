#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.34014
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SmartVigilance")]
	public partial class DataClassesSmartVigiDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertUtilisateurs(Utilisateurs instance);
    partial void UpdateUtilisateurs(Utilisateurs instance);
    partial void DeleteUtilisateurs(Utilisateurs instance);
    partial void InsertRepertoire(Repertoire instance);
    partial void UpdateRepertoire(Repertoire instance);
    partial void DeleteRepertoire(Repertoire instance);
    partial void InsertInterventions(Interventions instance);
    partial void UpdateInterventions(Interventions instance);
    partial void DeleteInterventions(Interventions instance);
    #endregion
		
		public DataClassesSmartVigiDataContext() : 
				base(global::DAL.Properties.Settings.Default.SmartVigilanceConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesSmartVigiDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesSmartVigiDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesSmartVigiDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesSmartVigiDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Utilisateurs> Utilisateurs
		{
			get
			{
				return this.GetTable<Utilisateurs>();
			}
		}
		
		public System.Data.Linq.Table<Repertoire> Repertoire
		{
			get
			{
				return this.GetTable<Repertoire>();
			}
		}
		
		public System.Data.Linq.Table<Interventions> Interventions
		{
			get
			{
				return this.GetTable<Interventions>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Utilisateurs")]
	public partial class Utilisateurs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Nom;
		
		private string _Prenom;
		
		private string _Adresse;
		
		private string _NTel;
		
		private string _Email;
		
		private System.Data.Linq.Binary _Photo;
		
		private string _Login;
		
		private string _Password;
		
		private EntitySet<Repertoire> _Repertoire;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnPrenomChanging(string value);
    partial void OnPrenomChanged();
    partial void OnAdresseChanging(string value);
    partial void OnAdresseChanged();
    partial void OnNTelChanging(string value);
    partial void OnNTelChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Utilisateurs()
		{
			this._Repertoire = new EntitySet<Repertoire>(new Action<Repertoire>(this.attach_Repertoire), new Action<Repertoire>(this.detach_Repertoire));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenom", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Prenom
		{
			get
			{
				return this._Prenom;
			}
			set
			{
				if ((this._Prenom != value))
				{
					this.OnPrenomChanging(value);
					this.SendPropertyChanging();
					this._Prenom = value;
					this.SendPropertyChanged("Prenom");
					this.OnPrenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adresse", DbType="VarChar(50)")]
		public string Adresse
		{
			get
			{
				return this._Adresse;
			}
			set
			{
				if ((this._Adresse != value))
				{
					this.OnAdresseChanging(value);
					this.SendPropertyChanging();
					this._Adresse = value;
					this.SendPropertyChanged("Adresse");
					this.OnAdresseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NTel", DbType="Char(15) NOT NULL", CanBeNull=false)]
		public string NTel
		{
			get
			{
				return this._NTel;
			}
			set
			{
				if ((this._NTel != value))
				{
					this.OnNTelChanging(value);
					this.SendPropertyChanging();
					this._NTel = value;
					this.SendPropertyChanged("NTel");
					this.OnNTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(15)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utilisateurs_Repertoire", Storage="_Repertoire", ThisKey="ID", OtherKey="IDUtilisateur")]
		public EntitySet<Repertoire> Repertoire
		{
			get
			{
				return this._Repertoire;
			}
			set
			{
				this._Repertoire.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Repertoire(Repertoire entity)
		{
			this.SendPropertyChanging();
			entity.Utilisateurs = this;
		}
		
		private void detach_Repertoire(Repertoire entity)
		{
			this.SendPropertyChanging();
			entity.Utilisateurs = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Repertoire")]
	public partial class Repertoire : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDUtilisateur;
		
		private int _IDContact;
		
		private string _Nom;
		
		private string _Prenom;
		
		private string _Adresse;
		
		private string _NTel;
		
		private string _Email;
		
		private System.Data.Linq.Binary _Photo;
		
		private int _Priorite;
		
		private EntitySet<Interventions> _Interventions;
		
		private EntityRef<Utilisateurs> _Utilisateurs;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDUtilisateurChanging(int value);
    partial void OnIDUtilisateurChanged();
    partial void OnIDContactChanging(int value);
    partial void OnIDContactChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnPrenomChanging(string value);
    partial void OnPrenomChanged();
    partial void OnAdresseChanging(string value);
    partial void OnAdresseChanged();
    partial void OnNTelChanging(string value);
    partial void OnNTelChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnPrioriteChanging(int value);
    partial void OnPrioriteChanged();
    #endregion
		
		public Repertoire()
		{
			this._Interventions = new EntitySet<Interventions>(new Action<Interventions>(this.attach_Interventions), new Action<Interventions>(this.detach_Interventions));
			this._Utilisateurs = default(EntityRef<Utilisateurs>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUtilisateur", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDUtilisateur
		{
			get
			{
				return this._IDUtilisateur;
			}
			set
			{
				if ((this._IDUtilisateur != value))
				{
					if (this._Utilisateurs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUtilisateurChanging(value);
					this.SendPropertyChanging();
					this._IDUtilisateur = value;
					this.SendPropertyChanged("IDUtilisateur");
					this.OnIDUtilisateurChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDContact", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDContact
		{
			get
			{
				return this._IDContact;
			}
			set
			{
				if ((this._IDContact != value))
				{
					this.OnIDContactChanging(value);
					this.SendPropertyChanging();
					this._IDContact = value;
					this.SendPropertyChanged("IDContact");
					this.OnIDContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenom", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Prenom
		{
			get
			{
				return this._Prenom;
			}
			set
			{
				if ((this._Prenom != value))
				{
					this.OnPrenomChanging(value);
					this.SendPropertyChanging();
					this._Prenom = value;
					this.SendPropertyChanged("Prenom");
					this.OnPrenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adresse", DbType="VarChar(50)")]
		public string Adresse
		{
			get
			{
				return this._Adresse;
			}
			set
			{
				if ((this._Adresse != value))
				{
					this.OnAdresseChanging(value);
					this.SendPropertyChanging();
					this._Adresse = value;
					this.SendPropertyChanged("Adresse");
					this.OnAdresseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NTel", DbType="Char(15) NOT NULL", CanBeNull=false)]
		public string NTel
		{
			get
			{
				return this._NTel;
			}
			set
			{
				if ((this._NTel != value))
				{
					this.OnNTelChanging(value);
					this.SendPropertyChanging();
					this._NTel = value;
					this.SendPropertyChanged("NTel");
					this.OnNTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(15)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priorite", DbType="Int NOT NULL")]
		public int Priorite
		{
			get
			{
				return this._Priorite;
			}
			set
			{
				if ((this._Priorite != value))
				{
					this.OnPrioriteChanging(value);
					this.SendPropertyChanging();
					this._Priorite = value;
					this.SendPropertyChanged("Priorite");
					this.OnPrioriteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Repertoire_Interventions", Storage="_Interventions", ThisKey="IDUtilisateur,IDContact", OtherKey="IDUtilisateur,IDContact")]
		public EntitySet<Interventions> Interventions
		{
			get
			{
				return this._Interventions;
			}
			set
			{
				this._Interventions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utilisateurs_Repertoire", Storage="_Utilisateurs", ThisKey="IDUtilisateur", OtherKey="ID", IsForeignKey=true)]
		public Utilisateurs Utilisateurs
		{
			get
			{
				return this._Utilisateurs.Entity;
			}
			set
			{
				Utilisateurs previousValue = this._Utilisateurs.Entity;
				if (((previousValue != value) 
							|| (this._Utilisateurs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Utilisateurs.Entity = null;
						previousValue.Repertoire.Remove(this);
					}
					this._Utilisateurs.Entity = value;
					if ((value != null))
					{
						value.Repertoire.Add(this);
						this._IDUtilisateur = value.ID;
					}
					else
					{
						this._IDUtilisateur = default(int);
					}
					this.SendPropertyChanged("Utilisateurs");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Interventions(Interventions entity)
		{
			this.SendPropertyChanging();
			entity.Repertoire = this;
		}
		
		private void detach_Interventions(Interventions entity)
		{
			this.SendPropertyChanging();
			entity.Repertoire = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Interventions")]
	public partial class Interventions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDUtilisateur;
		
		private int _IDContact;
		
		private System.DateTime _DateHeure;
		
		private int _UrgenceLevel;
		
		private string _GPSLocation;
		
		private string _Data;
		
		private EntityRef<Repertoire> _Repertoire;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDUtilisateurChanging(int value);
    partial void OnIDUtilisateurChanged();
    partial void OnIDContactChanging(int value);
    partial void OnIDContactChanged();
    partial void OnDateHeureChanging(System.DateTime value);
    partial void OnDateHeureChanged();
    partial void OnUrgenceLevelChanging(int value);
    partial void OnUrgenceLevelChanged();
    partial void OnGPSLocationChanging(string value);
    partial void OnGPSLocationChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    #endregion
		
		public Interventions()
		{
			this._Repertoire = default(EntityRef<Repertoire>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUtilisateur", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDUtilisateur
		{
			get
			{
				return this._IDUtilisateur;
			}
			set
			{
				if ((this._IDUtilisateur != value))
				{
					if (this._Repertoire.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUtilisateurChanging(value);
					this.SendPropertyChanging();
					this._IDUtilisateur = value;
					this.SendPropertyChanged("IDUtilisateur");
					this.OnIDUtilisateurChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDContact", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDContact
		{
			get
			{
				return this._IDContact;
			}
			set
			{
				if ((this._IDContact != value))
				{
					if (this._Repertoire.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDContactChanging(value);
					this.SendPropertyChanging();
					this._IDContact = value;
					this.SendPropertyChanged("IDContact");
					this.OnIDContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateHeure", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime DateHeure
		{
			get
			{
				return this._DateHeure;
			}
			set
			{
				if ((this._DateHeure != value))
				{
					this.OnDateHeureChanging(value);
					this.SendPropertyChanging();
					this._DateHeure = value;
					this.SendPropertyChanged("DateHeure");
					this.OnDateHeureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UrgenceLevel", DbType="Int NOT NULL")]
		public int UrgenceLevel
		{
			get
			{
				return this._UrgenceLevel;
			}
			set
			{
				if ((this._UrgenceLevel != value))
				{
					this.OnUrgenceLevelChanging(value);
					this.SendPropertyChanging();
					this._UrgenceLevel = value;
					this.SendPropertyChanged("UrgenceLevel");
					this.OnUrgenceLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GPSLocation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GPSLocation
		{
			get
			{
				return this._GPSLocation;
			}
			set
			{
				if ((this._GPSLocation != value))
				{
					this.OnGPSLocationChanging(value);
					this.SendPropertyChanging();
					this._GPSLocation = value;
					this.SendPropertyChanged("GPSLocation");
					this.OnGPSLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Repertoire_Interventions", Storage="_Repertoire", ThisKey="IDUtilisateur,IDContact", OtherKey="IDUtilisateur,IDContact", IsForeignKey=true)]
		public Repertoire Repertoire
		{
			get
			{
				return this._Repertoire.Entity;
			}
			set
			{
				Repertoire previousValue = this._Repertoire.Entity;
				if (((previousValue != value) 
							|| (this._Repertoire.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Repertoire.Entity = null;
						previousValue.Interventions.Remove(this);
					}
					this._Repertoire.Entity = value;
					if ((value != null))
					{
						value.Interventions.Add(this);
						this._IDUtilisateur = value.IDUtilisateur;
						this._IDContact = value.IDContact;
					}
					else
					{
						this._IDUtilisateur = default(int);
						this._IDContact = default(int);
					}
					this.SendPropertyChanged("Repertoire");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
